public class Bracket {

	// individual game simulation
	public static Team gameSimulation(Team a, Team b) {
		int[] astats = a.getStatArr();
		// if there is a situation where the lower seed has always won...
		if (astats[b.getSeedNum() - 1] == 0) {
			if (a.getSeedNum() < b.getSeedNum()) {
				System.out.println(a.getName() +" ("+ a.getSeedNum() + ") beats " + b.getName() + " (" +  b.getSeedNum()+ ")");
				return a;
			} else {
				System.out.println(b.getName() +" ("+ b.getSeedNum() + ") beats " + a.getName() + " (" +  a.getSeedNum()+ ")");
				return b;
			}
		}
		// else, generate a "random" number and assign victory based off that
 		double random = Math.random() * (1000 - 1) + 1;
		if (random < astats[b.getSeedNum() - 1]) {
			System.out.println(a.getName() +" ("+ a.getSeedNum() + ") beats " + b.getName() + " (" +  b.getSeedNum()+ ")");
			return a;
		} else {
			System.out.println(b.getName() +" ("+ b.getSeedNum() + ") beats " + a.getName() + " (" +  a.getSeedNum()+ ")");
			return b;
		}
	}


	// 1/4 of bracket similation (called 4 times to fill an entire bracket)
	public static Team miniSimulation(Team a1, Team a2, Team a3, Team a4, Team a5, Team a6, Team a7, Team a8,
			Team a9, Team a10, Team a11, Team a12, Team a13, Team a14, Team a15, Team a16) {
		Team[] secondRound = new Team[8]; // 8 teams from this mini section make the second round
		Team[] sweetSixteen = new Team[4]; // 4 teams from this mini section
		Team[] eliteEight = new Team[2];
		Team finalFourSendOff;

		// Who makes the second round?
		// Seed 1 vs. Seed 16
		System.out.println("First round games");
		System.out.println("------------------");
		Team g1Winner = gameSimulation(a1, a16);
		secondRound[0] = g1Winner;
		Team g2Winner = gameSimulation(a8, a9);
		secondRound[1] = g2Winner;
		Team g3Winner = gameSimulation(a4, a13);
		secondRound[2] = g3Winner;
		Team g4Winner = gameSimulation(a5, a12);
		secondRound[3] = g4Winner;
		Team g5Winner = gameSimulation(a6, a11);
		secondRound[4] = g5Winner;
		Team g6Winner = gameSimulation(a3, a14);
		secondRound[5] = g6Winner;
		Team g7Winner = gameSimulation(a7, a10);
		secondRound[6] = g7Winner;
		Team g8Winner = gameSimulation(a2, a15);
		secondRound[7] = g8Winner;
		System.out.println();

		// Who makes the sweetSixteen?
		System.out.println("Second round games");
		System.out.println("------------------");
		Team g1Winner2 = gameSimulation(secondRound[0], secondRound[1]);
		sweetSixteen[0] = g1Winner2;
		Team g2Winner2 = gameSimulation(secondRound[2], secondRound[3]);
		sweetSixteen[1] = g2Winner2;
		Team g3Winner2 = gameSimulation(secondRound[4], secondRound[5]);
		sweetSixteen[2] = g3Winner2;
		Team g4Winner2 = gameSimulation(secondRound[6], secondRound[7]);
		sweetSixteen[3] = g4Winner2;
		System.out.println();

		// Who makes the eliteEight?
		System.out.println("Sweet Sixteen Games");
		System.out.println("------------------");
		Team g1Winner3 = gameSimulation(sweetSixteen[0], sweetSixteen[1]);
		eliteEight[0] = g1Winner3;
		Team g2Winner3 = gameSimulation(sweetSixteen[2], sweetSixteen[3]);
		eliteEight[1] = g2Winner3;
		System.out.println();

		// Who from this section is being sent to the final four?
		System.out.println("Elite Eight Games");
		System.out.println("------------------");
		Team g1Winner4 = gameSimulation(eliteEight[0], eliteEight[1]);
		finalFourSendOff = g1Winner4;
		System.out.println();

		return finalFourSendOff;

	}

	// calls previous functions to simulated
	public static Team simulate() {

		// fill array with 64 teams
		Team t1 = new Team(1, "Gonzaga");
		Team t2 = new Team(2, "Duke");
		Team t3 = new Team(3, "Texas Tech");
		Team t4 = new Team(4, "Arkansas");
		Team t5 = new Team(5, "UConn");
		Team t6 = new Team(6, "Alabama");
		Team t7 = new Team(7, "Michigan State");
		Team t8 = new Team(8, "Boise State");
		Team t9 = new Team(9, "Memphis");
		Team t10 = new Team(10, "Davidson");
		Team t11 = new Team(11, "Rutgers");
		Team t12 = new Team(12, "New Mexico State");
		Team t13 = new Team(13, "Vermont");
		Team t14 = new Team(14, "Montana State");
		Team t15 = new Team(15, "CSU Fullerton");
		Team t16 = new Team(16, "Georgia State");


		Team t17 = new Team(1, "Baylor");
		Team t18 = new Team(2, "Kentucky");
		Team t19 = new Team(3, "Purdue");
		Team t20 = new Team(4, "UCLA");
		Team t21 = new Team(5, "Saint Mary's");
		Team t22 = new Team(6, "Texas");
		Team t23 = new Team(7, "Murray State");
		Team t24 = new Team(8, "North Carolina");
		Team t25 = new Team(9, "Marquette");
		Team t26 = new Team(10, "San Francisco");
		Team t27 = new Team(11, "Virginia Tech");
		Team t28 = new Team(12, "Indiana");
		Team t29 = new Team(13, "Akron");
		Team t30 = new Team(14, "Yale");
		Team t31 = new Team(15, "Saint Peters");
		Team t32 = new Team(16, "Norfolk State");

		Team t33 = new Team(1, "Arizona");
		Team t34 = new Team(2, "Villanova");
		Team t35 = new Team(3, "Tennessee");
		Team t36 = new Team(4, "Illinois");
		Team t37 = new Team(5, "Houston");
		Team t38 = new Team(6, "Colorado State");
		Team t39 = new Team(7, "Ohio State");
		Team t40 = new Team(8, "Seton Hall");
		Team t41 = new Team(9, "TCU");
		Team t42 = new Team(10, "Loyola Chicago");
		Team t43 = new Team(11, "Michigan");
		Team t44 = new Team(12, "UAB");
		Team t45 = new Team(13, "Chattanooga");
		Team t46 = new Team(14, "Longwood");
		Team t47 = new Team(15, "Delaware");
		Team t48 = new Team(16, "Bryant");

		Team t49 = new Team(1, "Kansas");
		Team t50 = new Team(2, "Auburn");
		Team t51 = new Team(3, "Wisconsin");
		Team t52 = new Team(4, "Providence");
		Team t53 = new Team(5, "Iowa");
		Team t54 = new Team(6, "LSU");
		Team t55 = new Team(7, "USC");
		Team t56 = new Team(8, "San Diego State");
		Team t57 = new Team(9, "Creighton");
		Team t58 = new Team(10, "Miami");
		Team t59 = new Team(11, "Iowa State");
		Team t60 = new Team(12, "Richmond");
		Team t61 = new Team(13, "South Dakota State");
		Team t62 = new Team(14, "Colgate");
		Team t63 = new Team(15, "Jacksonville State");
		Team t64 = new Team(16, "Texas A&M");

		// array declaration for final 4 teams (what simulation returns)
		Team[] finalFour = new Team[4];

		// simulate game
		System.out.println("<<<<THE WEST>>>>");
		finalFour[0] = miniSimulation(t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16);
		System.out.println();
		System.out.println("<<<<THE EAST>>>>");
		finalFour[1] = miniSimulation(t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32);
		System.out.println();
		System.out.println("<<<<THE SOUTH>>>>");
		finalFour[2] = miniSimulation(t33,t34,t35,t36,t37,t38,t39,t40,t41,t42,t43,t44,t45,t46,t47,t48);
		System.out.println();
		System.out.println("<<<<THE MIDWEST>>>>");
		finalFour[3] = miniSimulation(t49,t50,t51,t52,t53,t54,t55,t56,t57,t58,t59,t60,t61,t62,t63,t64);
		System.out.println();

		//final four sim
		System.out.println("THE FINAL FOUR");
		System.out.println("------------------");
		Team finals1 = gameSimulation(finalFour[0], finalFour[1]);
		Team finals2 = gameSimulation(finalFour[2], finalFour[3]);
		System.out.println();
		
		System.out.println("Championship Game");
		System.out.println("------------------");
		Team winner = gameSimulation(finals1, finals2);
		System.out.println();

		// return statement
		return winner;

	}

	public static void main(String[] args) {

		Team a = simulate();

		// seed counter
		/* 
		int seed1Count = 0, seed2Count = 0, seed3Count = 0, seed4Count = 0, seed5Count = 0, seed6Count = 0,
				seed7Count = 0, seed8Count = 0, seed9Count = 0, seed10Count = 0, seed11Count = 0,
				seed12Count = 0, seed13Count = 0, seed14Count = 0, seed15Count = 0, seed16Count = 0;
		// create an array of all seed counting
		int[] seedCounter = { seed1Count, seed2Count, seed3Count, seed4Count, seed5Count, seed6Count, seed7Count,
				seed8Count, seed9Count, seed10Count, seed11Count, seed12Count, seed13Count, seed14Count, seed15Count,
				seed16Count };

		int simamt = 1000;
		// run simulation (i) amount of times
		for (int i = 0; i < simamt; i++) {

			// call simulate, arr = final 4
			Team[] arr = simulate();

			// cycle through final 4, and update counters
			for (Team a : arr) {
				if (a.getSeedNum() == 1) {
					seed1Count++;
				}
				if (a.getSeedNum() == 2) {
					seed2Count++;
				}
				if (a.getSeedNum() == 3) {
					seed3Count++;
				}
				if (a.getSeedNum() == 4) {
					seed4Count++;
				}
				if (a.getSeedNum() == 5) {
					seed5Count++;
				}
				if (a.getSeedNum() == 6) {
					seed6Count++;
				}
				if (a.getSeedNum() == 7) {
					seed7Count++;
				}
				if (a.getSeedNum() == 8) {
					seed8Count++;
				}
				if (a.getSeedNum() == 9) {
					seed9Count++;
				}
				if (a.getSeedNum() == 10) {
					seed10Count++;
				}
				if (a.getSeedNum() == 11) {
					seed11Count++;
				}
				if (a.getSeedNum() == 12) {
					seed12Count++;
				}
				if (a.getSeedNum() == 13) {
					seed13Count++;
				}
				if (a.getSeedNum() == 14) {
					seed14Count++;
				}
				if (a.getSeedNum() == 15) {
					seed15Count++;
				}
				if (a.getSeedNum() == 16) {
					seed16Count++;
				}
			}
		}

		// create a total game counter (to make sure simulation worked correctly) should
		// be (4 x i)
		int total = 0;

		// loop through seedCounter to print the number of times each seed made the
		// final four
		System.out.println();
		System.out.println("Simulated " + simamt + " times");
		System.out.println();

		for (int i = 0; i < 16; i++) {
			int val = i + 1;
			System.out.println("# " + val + " seeds in Fin4:  " + seedCounter[i]);
			total += seedCounter[i];
		}

		// print TOTAL amount of final four teams
		System.out.println();
		System.out.println("Total # of Final Four positions: " + total);
	*/
	}
}

public class Team {
    // instance variables
    private String name;
    private int[] seedvs;
    private int seedNum;

    // constructor
    public Team(int sn, String n) {
        name = n;
        seedNum = sn;
        int[] sarr = new int[16];
        seedvs = sarr;

        // data
        if (seedNum == 1) {
            seedvs[0] = 500;
            seedvs[1] = 545;
            seedvs[2] = 634;
            seedvs[3] = 705;
            seedvs[4] = 825;
            seedvs[5] = 706;
            seedvs[6] = 857;
            seedvs[7] = 791;
            seedvs[8] = 905;
            seedvs[9] = 875;
            seedvs[10] = 556;
            seedvs[11] = 1000;
            seedvs[12] = 1000;
            seedvs[13] = 0;
            seedvs[14] = 0;
            seedvs[15] = 993;
        }
        if (seedNum == 2) {
            seedvs[0] = 455;
            seedvs[1] = 500;
            seedvs[2] = 609;
            seedvs[3] = 500;
            seedvs[4] = 286;
            seedvs[5] = 722;
            seedvs[6] = 700;
            seedvs[7] = 400;
            seedvs[8] = 500;
            seedvs[9] = 635;
            seedvs[10] = 842;
            seedvs[11] = 1000;
            seedvs[12] = 0;
            seedvs[13] = 0;
            seedvs[14] = 932;
            seedvs[15] = 0;
        }
        if (seedNum == 3) {
            seedvs[0] = 366;
            seedvs[1] = 391;
            seedvs[2] = 500;
            seedvs[3] = 625;
            seedvs[4] = 500;
            seedvs[5] = 581;
            seedvs[6] = 611;
            seedvs[7] = 1000;
            seedvs[8] = 1000;
            seedvs[9] = 692;
            seedvs[10] = 661;
            seedvs[11] = 0;
            seedvs[12] = 0;
            seedvs[13] = 851;
            seedvs[14] = 667;
            seedvs[15] = 0;
        }
        if (seedNum == 4) {
            seedvs[0] = 295;
            seedvs[1] = 500;
            seedvs[2] = 375;
            seedvs[3] = 500;
            seedvs[4] = 561;
            seedvs[5] = 333;
            seedvs[6] = 333;
            seedvs[7] = 333;
            seedvs[8] = 500;
            seedvs[9] = 1000;
            seedvs[10] = 0;
            seedvs[11] = 705;
            seedvs[12] = 796;
            seedvs[13] = 0;
            seedvs[14] = 0;
            seedvs[15] = 0;
        }
        if (seedNum == 5) {
            seedvs[0] = 175;
            seedvs[0] = 714;
            seedvs[0] = 500;
            seedvs[0] = 439;
            seedvs[0] = 500;
            seedvs[5] = 1000;
            seedvs[6] = 0;
            seedvs[7] = 250;
            seedvs[8] = 250;
            seedvs[9] = 1000;
            seedvs[10] = 0;
            seedvs[11] = 667;
            seedvs[12] = 842;
            seedvs[13] = 0;
            seedvs[14] = 0;
            seedvs[15] = 0;
        }
        if (seedNum == 6) {
            seedvs[0] = 294;
            seedvs[1] = 278;
            seedvs[2] = 419;
            seedvs[3] = 667;
            seedvs[4] = 0;
            seedvs[5] = 0;
            seedvs[6] = 667;
            seedvs[7] = 250;
            seedvs[8] = 0;
            seedvs[9] = 600;
            seedvs[10] = 625;
            seedvs[11] = 0;
            seedvs[12] = 0;
            seedvs[13] = 875;
            seedvs[14] = 0;
            seedvs[15] = 0;
        }
        if (seedNum == 7) {
            seedvs[0] = 143;
            seedvs[1] = 300;
            seedvs[2] = 389;
            seedvs[3] = 667;
            seedvs[4] = 0;
            seedvs[5] = 333;
            seedvs[6] = 0;
            seedvs[7] = 500;
            seedvs[8] = 0;
            seedvs[9] = 605;
            seedvs[10] = 0;
            seedvs[11] = 0;
            seedvs[12] = 0;
            seedvs[13] = 1000;
            seedvs[14] = 40;
            seedvs[15] = 0;
        }
        if (seedNum == 8) {
            seedvs[0] = 209;
            seedvs[1] = 600;
            seedvs[2] = 0;
            seedvs[3] = 667;
            seedvs[4] = 750;
            seedvs[5] = 750;
            seedvs[6] = 500;
            seedvs[7] = 0;
            seedvs[8] = 512;
            seedvs[9] = 0;
            seedvs[10] = 1000;
            seedvs[11] = 0;
            seedvs[12] = 1000;
            seedvs[13] = 0;
            seedvs[14] = 1000;
            seedvs[15] = 0;
        }
        if (seedNum == 9) {
            seedvs[0] = 95;
            seedvs[1] = 500;
            seedvs[2] = 0;
            seedvs[3] = 500;
            seedvs[4] = 750;
            seedvs[5] = 0;
            seedvs[6] = 0;
            seedvs[7] = 488;
            seedvs[8] = 0;
            seedvs[9] = 1000;
            seedvs[10] = 0;
            seedvs[11] = 0;
            seedvs[12] = 1000;
            seedvs[13] = 0;
            seedvs[14] = 0;
            seedvs[15] = 1000;
        }
        if (seedNum == 10) {
            seedvs[0] = 125;
            seedvs[1] = 365;
            seedvs[2] = 308;
            seedvs[3] = 0;
            seedvs[4] = 0;
            seedvs[5] = 400;
            seedvs[6] = 395;
            seedvs[7] = 0;
            seedvs[8] = 0;
            seedvs[9] = 0;
            seedvs[10] = 500;
            seedvs[11] = 0;
            seedvs[12] = 0;
            seedvs[13] = 1000;
            seedvs[14] = 1000;
            seedvs[15] = 0;
        }
        if (seedNum == 11) {
            seedvs[0] = 444;
            seedvs[1] = 158;
            seedvs[2] = 339;
            seedvs[3] = 0;
            seedvs[4] = 0;
            seedvs[5] = 375;
            seedvs[6] = 1000;
            seedvs[7] = 0;
            seedvs[8] = 1000;
            seedvs[9] = 50;
            seedvs[10] = 0;
            seedvs[11] = 0;
            seedvs[12] = 0;
            seedvs[13] = 1000;
            seedvs[14] = 0;
            seedvs[15] = 0;
        }
        if (seedNum == 12) {
            seedvs[0] = 0;
            seedvs[1] = 0;
            seedvs[2] = 0;
            seedvs[3] = 295;
            seedvs[4] = 333;
            seedvs[5] = 0;
            seedvs[6] = 0;
            seedvs[7] = 1000;
            seedvs[8] = 0;
            seedvs[9] = 0;
            seedvs[10] = 0;
            seedvs[11] = 0;
            seedvs[12] = 750;
            seedvs[13] = 0;
            seedvs[14] = 0;
            seedvs[15] = 0;
        }
        if (seedNum == 13) {
            seedvs[0] = 0;
            seedvs[1] = 0;
            seedvs[2] = 0;
            seedvs[3] = 204;
            seedvs[4] = 158;
            seedvs[5] = 0;
            seedvs[6] = 0;
            seedvs[7] = 0;
            seedvs[8] = 0;
            seedvs[9] = 0;
            seedvs[10] = 0;
            seedvs[11] = 250;
            seedvs[12] = 0;
            seedvs[13] = 0;
            seedvs[14] = 0;
            seedvs[15] = 0;
        }
        if (seedNum == 14) {
            seedvs[0] = 0;
            seedvs[1] = 0;
            seedvs[2] = 149;
            seedvs[3] = 0;
            seedvs[4] = 0;
            seedvs[5] = 125;
            seedvs[6] = 0;
            seedvs[7] = 0;
            seedvs[8] = 0;
            seedvs[9] = 0;
            seedvs[10] = 0;
            seedvs[11] = 0;
            seedvs[12] = 0;
            seedvs[13] = 0;
            seedvs[14] = 0;
            seedvs[15] = 0;
        }
        if (seedNum == 15) {
            seedvs[0] = 0;
            seedvs[1] = 68;
            seedvs[2] = 333;
            seedvs[3] = 0;
            seedvs[4] = 0;
            seedvs[5] = 0;
            seedvs[6] = 600;
            seedvs[7] = 0;
            seedvs[8] = 0;
            seedvs[9] = 0;
            seedvs[10] = 0;
            seedvs[11] = 0;
            seedvs[12] = 0;
            seedvs[13] = 0;
            seedvs[14] = 0;
            seedvs[15] = 0;
        }
        if (seedNum == 16) {
            seedvs[0] = 7;
            seedvs[1] = 0;
            seedvs[2] = 0;
            seedvs[3] = 0;
            seedvs[4] = 0;
            seedvs[5] = 0;
            seedvs[6] = 0;
            seedvs[7] = 0;
            seedvs[8] = 0;
            seedvs[9] = 0;
            seedvs[10] = 0;
            seedvs[11] = 0;
            seedvs[12] = 0;
            seedvs[13] = 0;
            seedvs[14] = 0;
            seedvs[15] = 0;
        }
    }

    // getters for attributes

    public String getName() {
        return name;
    }

    public int getSeedNum() {
        return seedNum;
    }

    public int[] getStatArr() {
        return seedvs;
    }

}

